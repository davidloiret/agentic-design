import { PatternScenario } from './types';
import { nodeStyle, edgeStyle } from './styles';

export const supervisorWorkerPattern: PatternScenario = {
  id: 'supervisor-worker-pattern',
  title: 'Supervisor-Worker Pattern',
  description: 'Hierarchical coordination pattern where a supervisor agent manages and distributes tasks among specialized worker agents, monitoring progress and ensuring quality outcomes.',
  initialNodes: [
    {
      id: 'client-request',
      position: { x: 400, y: 50 },
      data: { label: 'üéØ Client Request\n"Build e-commerce platform with AI features"' },
      style: { ...nodeStyle, background: '#10b981', minWidth: 300 },
    },
    {
      id: 'supervisor',
      position: { x: 375, y: 150 },
      data: { label: 'üëî Supervisor Agent\nTask decomposition & orchestration' },
      style: { ...nodeStyle, background: '#3b82f6', minWidth: 250 },
    },
    // Supervisor Components
    {
      id: 'task-analyzer',
      position: { x: 100, y: 250 },
      data: { label: 'üìä Task Analyzer\nBreak down requirements' },
      style: { ...nodeStyle, background: '#7c3aed', minWidth: 180 },
    },
    {
      id: 'worker-selector',
      position: { x: 300, y: 250 },
      data: { label: 'üéØ Worker Selector\nMatch tasks to workers' },
      style: { ...nodeStyle, background: '#7c3aed', minWidth: 180 },
    },
    {
      id: 'work-queue',
      position: { x: 500, y: 250 },
      data: { label: 'üìã Work Queue\nPrioritized task queue' },
      style: { ...nodeStyle, background: '#7c3aed', minWidth: 180 },
    },
    {
      id: 'progress-monitor',
      position: { x: 700, y: 250 },
      data: { label: 'üìà Progress Monitor\nTrack worker status' },
      style: { ...nodeStyle, background: '#7c3aed', minWidth: 180 },
    },
    // Worker Pool
    {
      id: 'frontend-worker',
      position: { x: 50, y: 400 },
      data: { label: 'üé® Frontend Worker\nUI/UX Development\nStatus: Active' },
      style: { ...nodeStyle, background: '#22c55e', minWidth: 150 },
    },
    {
      id: 'backend-worker',
      position: { x: 200, y: 400 },
      data: { label: '‚öôÔ∏è Backend Worker\nAPI Development\nStatus: Active' },
      style: { ...nodeStyle, background: '#22c55e', minWidth: 150 },
    },
    {
      id: 'database-worker',
      position: { x: 350, y: 400 },
      data: { label: 'üóÑÔ∏è Database Worker\nSchema Design\nStatus: Active' },
      style: { ...nodeStyle, background: '#22c55e', minWidth: 150 },
    },
    {
      id: 'ml-worker',
      position: { x: 500, y: 400 },
      data: { label: 'ü§ñ ML Worker\nRecommendation Engine\nStatus: Active' },
      style: { ...nodeStyle, background: '#22c55e', minWidth: 150 },
    },
    {
      id: 'security-worker',
      position: { x: 650, y: 400 },
      data: { label: 'üîí Security Worker\nAuth & Encryption\nStatus: Idle' },
      style: { ...nodeStyle, background: '#fbbf24', minWidth: 150 },
    },
    {
      id: 'testing-worker',
      position: { x: 800, y: 400 },
      data: { label: 'üß™ Testing Worker\nQA & Validation\nStatus: Waiting' },
      style: { ...nodeStyle, background: '#f87171', minWidth: 150 },
    },
    // Task Assignments
    {
      id: 'task-1',
      position: { x: 50, y: 520 },
      data: { label: 'üìù Task: Landing Page\nAssigned: Frontend\nPriority: High' },
      style: { ...nodeStyle, background: '#ec4899', minWidth: 150 },
    },
    {
      id: 'task-2',
      position: { x: 200, y: 520 },
      data: { label: 'üìù Task: User API\nAssigned: Backend\nPriority: High' },
      style: { ...nodeStyle, background: '#ec4899', minWidth: 150 },
    },
    {
      id: 'task-3',
      position: { x: 350, y: 520 },
      data: { label: 'üìù Task: Product DB\nAssigned: Database\nPriority: Medium' },
      style: { ...nodeStyle, background: '#ec4899', minWidth: 150 },
    },
    {
      id: 'task-4',
      position: { x: 500, y: 520 },
      data: { label: 'üìù Task: Recommendations\nAssigned: ML\nPriority: Low' },
      style: { ...nodeStyle, background: '#ec4899', minWidth: 150 },
    },
    // Coordination Mechanisms
    {
      id: 'heartbeat-checker',
      position: { x: 100, y: 650 },
      data: { label: 'üíì Heartbeat Checker\nWorker health monitoring' },
      style: { ...nodeStyle, background: '#f59e0b', minWidth: 180 },
    },
    {
      id: 'load-balancer',
      position: { x: 300, y: 650 },
      data: { label: '‚öñÔ∏è Load Balancer\nDistribute workload evenly' },
      style: { ...nodeStyle, background: '#f59e0b', minWidth: 180 },
    },
    {
      id: 'dependency-resolver',
      position: { x: 500, y: 650 },
      data: { label: 'üîó Dependency Resolver\nManage task dependencies' },
      style: { ...nodeStyle, background: '#f59e0b', minWidth: 180 },
    },
    {
      id: 'conflict-resolver',
      position: { x: 700, y: 650 },
      data: { label: 'ü§ù Conflict Resolver\nHandle resource conflicts' },
      style: { ...nodeStyle, background: '#f59e0b', minWidth: 180 },
    },
    // Result Processing
    {
      id: 'result-validator',
      position: { x: 200, y: 780 },
      data: { label: '‚úÖ Result Validator\nQuality assurance' },
      style: { ...nodeStyle, background: '#ef4444', minWidth: 180 },
    },
    {
      id: 'result-merger',
      position: { x: 400, y: 780 },
      data: { label: 'üîÄ Result Merger\nCombine worker outputs' },
      style: { ...nodeStyle, background: '#ef4444', minWidth: 180 },
    },
    {
      id: 'error-handler',
      position: { x: 600, y: 780 },
      data: { label: '‚ö†Ô∏è Error Handler\nRetry & fallback logic' },
      style: { ...nodeStyle, background: '#ef4444', minWidth: 180 },
    },
    {
      id: 'output',
      position: { x: 400, y: 900 },
      data: { label: '‚ú® Completed Project\nFully integrated e-commerce platform' },
      style: { ...nodeStyle, background: '#10b981', minWidth: 280 },
    },
  ],
  initialEdges: [
    {
      id: 'request-supervisor',
      source: 'client-request',
      target: 'supervisor',
      style: { ...edgeStyle, stroke: '#3b82f6' },
      animated: true,
    },
    {
      id: 'supervisor-analyzer',
      source: 'supervisor',
      target: 'task-analyzer',
      style: { ...edgeStyle, stroke: '#7c3aed' },
      label: 'Analyze',
    },
    {
      id: 'supervisor-selector',
      source: 'supervisor',
      target: 'worker-selector',
      style: { ...edgeStyle, stroke: '#7c3aed' },
      label: 'Select',
    },
    {
      id: 'supervisor-queue',
      source: 'supervisor',
      target: 'work-queue',
      style: { ...edgeStyle, stroke: '#7c3aed' },
      label: 'Queue',
    },
    {
      id: 'supervisor-monitor',
      source: 'supervisor',
      target: 'progress-monitor',
      style: { ...edgeStyle, stroke: '#7c3aed' },
      label: 'Monitor',
    },
    // Task distribution
    {
      id: 'queue-frontend',
      source: 'work-queue',
      target: 'frontend-worker',
      style: { ...edgeStyle, stroke: '#22c55e' },
      label: 'Assign',
    },
    {
      id: 'queue-backend',
      source: 'work-queue',
      target: 'backend-worker',
      style: { ...edgeStyle, stroke: '#22c55e' },
      label: 'Assign',
    },
    {
      id: 'queue-database',
      source: 'work-queue',
      target: 'database-worker',
      style: { ...edgeStyle, stroke: '#22c55e' },
      label: 'Assign',
    },
    {
      id: 'queue-ml',
      source: 'work-queue',
      target: 'ml-worker',
      style: { ...edgeStyle, stroke: '#22c55e' },
      label: 'Assign',
    },
    {
      id: 'queue-security',
      source: 'work-queue',
      target: 'security-worker',
      style: { ...edgeStyle, stroke: '#fbbf24' },
      label: 'Queue',
    },
    {
      id: 'queue-testing',
      source: 'work-queue',
      target: 'testing-worker',
      style: { ...edgeStyle, stroke: '#f87171' },
      label: 'Wait',
    },
    // Worker to task execution
    {
      id: 'frontend-task1',
      source: 'frontend-worker',
      target: 'task-1',
      style: { ...edgeStyle, stroke: '#ec4899' },
      label: 'Execute',
    },
    {
      id: 'backend-task2',
      source: 'backend-worker',
      target: 'task-2',
      style: { ...edgeStyle, stroke: '#ec4899' },
      label: 'Execute',
    },
    {
      id: 'database-task3',
      source: 'database-worker',
      target: 'task-3',
      style: { ...edgeStyle, stroke: '#ec4899' },
      label: 'Execute',
    },
    {
      id: 'ml-task4',
      source: 'ml-worker',
      target: 'task-4',
      style: { ...edgeStyle, stroke: '#ec4899' },
      label: 'Execute',
    },
    // Worker status feedback
    {
      id: 'frontend-monitor',
      source: 'frontend-worker',
      target: 'progress-monitor',
      style: { ...edgeStyle, stroke: '#7c3aed', strokeDasharray: '5 5' },
      label: 'Status',
    },
    {
      id: 'backend-monitor',
      source: 'backend-worker',
      target: 'progress-monitor',
      style: { ...edgeStyle, stroke: '#7c3aed', strokeDasharray: '5 5' },
      label: 'Status',
    },
    {
      id: 'database-monitor',
      source: 'database-worker',
      target: 'progress-monitor',
      style: { ...edgeStyle, stroke: '#7c3aed', strokeDasharray: '5 5' },
      label: 'Status',
    },
    {
      id: 'ml-monitor',
      source: 'ml-worker',
      target: 'progress-monitor',
      style: { ...edgeStyle, stroke: '#7c3aed', strokeDasharray: '5 5' },
      label: 'Status',
    },
    // Coordination
    {
      id: 'monitor-heartbeat',
      source: 'progress-monitor',
      target: 'heartbeat-checker',
      style: { ...edgeStyle, stroke: '#f59e0b' },
    },
    {
      id: 'selector-balancer',
      source: 'worker-selector',
      target: 'load-balancer',
      style: { ...edgeStyle, stroke: '#f59e0b' },
    },
    {
      id: 'analyzer-dependency',
      source: 'task-analyzer',
      target: 'dependency-resolver',
      style: { ...edgeStyle, stroke: '#f59e0b' },
    },
    {
      id: 'balancer-conflict',
      source: 'load-balancer',
      target: 'conflict-resolver',
      style: { ...edgeStyle, stroke: '#f59e0b' },
    },
    // Feedback loops
    {
      id: 'heartbeat-supervisor',
      source: 'heartbeat-checker',
      target: 'supervisor',
      style: { ...edgeStyle, stroke: '#3b82f6', strokeDasharray: '5 5' },
      label: 'Health',
    },
    {
      id: 'dependency-supervisor',
      source: 'dependency-resolver',
      target: 'supervisor',
      style: { ...edgeStyle, stroke: '#3b82f6', strokeDasharray: '5 5' },
      label: 'Deps',
    },
    {
      id: 'conflict-supervisor',
      source: 'conflict-resolver',
      target: 'supervisor',
      style: { ...edgeStyle, stroke: '#3b82f6', strokeDasharray: '5 5' },
      label: 'Conflicts',
    },
    // Task results to validation
    {
      id: 'task1-validator',
      source: 'task-1',
      target: 'result-validator',
      style: { ...edgeStyle, stroke: '#ef4444' },
    },
    {
      id: 'task2-validator',
      source: 'task-2',
      target: 'result-validator',
      style: { ...edgeStyle, stroke: '#ef4444' },
    },
    {
      id: 'task3-validator',
      source: 'task-3',
      target: 'result-validator',
      style: { ...edgeStyle, stroke: '#ef4444' },
    },
    {
      id: 'task4-validator',
      source: 'task-4',
      target: 'result-validator',
      style: { ...edgeStyle, stroke: '#ef4444' },
    },
    // Result processing
    {
      id: 'validator-merger',
      source: 'result-validator',
      target: 'result-merger',
      style: { ...edgeStyle, stroke: '#ef4444' },
      label: 'Valid',
    },
    {
      id: 'validator-error',
      source: 'result-validator',
      target: 'error-handler',
      style: { ...edgeStyle, stroke: '#ef4444' },
      label: 'Error',
    },
    {
      id: 'error-supervisor',
      source: 'error-handler',
      target: 'supervisor',
      style: { ...edgeStyle, stroke: '#f59e0b', strokeDasharray: '5 5' },
      label: 'Retry',
    },
    {
      id: 'merger-output',
      source: 'result-merger',
      target: 'output',
      style: { ...edgeStyle, stroke: '#10b981' },
    },
  ],
  steps: [
    {
      title: 'Client Request',
      description: 'Complex project request requiring multiple specialized skills',
      activeNodes: ['client-request'],
      activeEdges: ['request-supervisor'],
    },
    {
      title: 'Supervisor Initialization',
      description: 'Supervisor analyzes request and prepares coordination systems',
      activeNodes: ['supervisor', 'task-analyzer', 'worker-selector', 'work-queue', 'progress-monitor'],
      activeEdges: ['supervisor-analyzer', 'supervisor-selector', 'supervisor-queue', 'supervisor-monitor'],
    },
    {
      title: 'Task Analysis',
      description: 'Break down project into discrete tasks with dependencies',
      activeNodes: ['task-analyzer', 'dependency-resolver'],
      activeEdges: ['analyzer-dependency'],
    },
    {
      title: 'Worker Selection',
      description: 'Match tasks to specialized workers based on capabilities',
      activeNodes: ['worker-selector', 'load-balancer'],
      activeEdges: ['selector-balancer'],
    },
    {
      title: 'Task Distribution',
      description: 'Assign tasks to workers from queue based on priority',
      activeNodes: ['work-queue', 'frontend-worker', 'backend-worker', 'database-worker', 'ml-worker'],
      activeEdges: ['queue-frontend', 'queue-backend', 'queue-database', 'queue-ml'],
    },
    {
      title: 'Parallel Execution',
      description: 'Workers execute tasks in parallel, updating status',
      activeNodes: ['frontend-worker', 'backend-worker', 'database-worker', 'ml-worker', 'task-1', 'task-2', 'task-3', 'task-4'],
      activeEdges: ['frontend-task1', 'backend-task2', 'database-task3', 'ml-task4'],
    },
    {
      title: 'Progress Monitoring',
      description: 'Supervisor monitors worker status and health',
      activeNodes: ['progress-monitor', 'heartbeat-checker'],
      activeEdges: ['frontend-monitor', 'backend-monitor', 'database-monitor', 'ml-monitor', 'monitor-heartbeat'],
    },
    {
      title: 'Coordination Feedback',
      description: 'Handle conflicts, dependencies, and worker health issues',
      activeNodes: ['heartbeat-checker', 'dependency-resolver', 'conflict-resolver', 'supervisor'],
      activeEdges: ['heartbeat-supervisor', 'dependency-supervisor', 'conflict-supervisor', 'balancer-conflict'],
    },
    {
      title: 'Result Validation',
      description: 'Validate completed tasks and handle errors',
      activeNodes: ['result-validator', 'error-handler'],
      activeEdges: ['task1-validator', 'task2-validator', 'task3-validator', 'task4-validator', 'validator-error'],
    },
    {
      title: 'Error Recovery',
      description: 'Retry failed tasks through supervisor',
      activeNodes: ['error-handler', 'supervisor'],
      activeEdges: ['error-supervisor'],
    },
    {
      title: 'Result Merging',
      description: 'Combine validated results from all workers',
      activeNodes: ['result-validator', 'result-merger'],
      activeEdges: ['validator-merger'],
    },
    {
      title: 'Final Delivery',
      description: 'Deliver completed integrated project',
      activeNodes: ['result-merger', 'output'],
      activeEdges: ['merger-output'],
    },
  ],
};