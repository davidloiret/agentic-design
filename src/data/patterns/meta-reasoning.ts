import { PatternScenario } from './types';
import { nodeStyle, edgeStyle } from './styles';

export const metaReasoningPattern: PatternScenario = {
  id: 'meta-reasoning',
  title: 'Meta-Reasoning Pattern',
  description: 'Higher-order reasoning about reasoning processes themselves, enabling agents to monitor, evaluate, and optimize their own reasoning strategies and decision-making approaches.',
  initialNodes: [
    {
      id: 'input',
      position: { x: 400, y: 50 },
      data: { label: 'üéØ Complex Problem Input' },
      style: { ...nodeStyle, background: '#10b981', minWidth: 200 },
    },
    {
      id: 'meta-controller',
      position: { x: 350, y: 150 },
      data: { label: 'üß† Meta-Reasoning Controller' },
      style: { ...nodeStyle, background: '#3b82f6', minWidth: 250 },
    },
    {
      id: 'problem-analysis',
      position: { x: 100, y: 250 },
      data: { label: 'üîç Problem Analysis\nComplexity assessment, domain identification' },
      style: { ...nodeStyle, background: '#7c3aed', minWidth: 200 },
    },
    {
      id: 'strategy-selection',
      position: { x: 350, y: 250 },
      data: { label: 'üìã Strategy Selection\nChoose reasoning approach' },
      style: { ...nodeStyle, background: '#7c3aed', minWidth: 200 },
    },
    {
      id: 'resource-allocation',
      position: { x: 600, y: 250 },
      data: { label: '‚ö° Resource Allocation\nTime, compute, memory' },
      style: { ...nodeStyle, background: '#7c3aed', minWidth: 200 },
    },
    {
      id: 'cot-strategy',
      position: { x: 50, y: 380 },
      data: { label: 'üí≠ Chain of Thought\nFor sequential reasoning' },
      style: nodeStyle,
    },
    {
      id: 'tot-strategy',
      position: { x: 200, y: 380 },
      data: { label: 'üå≥ Tree of Thoughts\nFor exploration problems' },
      style: nodeStyle,
    },
    {
      id: 'debate-strategy',
      position: { x: 350, y: 380 },
      data: { label: '‚öñÔ∏è Chain of Debates\nFor nuanced decisions' },
      style: nodeStyle,
    },
    {
      id: 'react-strategy',
      position: { x: 500, y: 380 },
      data: { label: 'üîÑ ReAct Pattern\nFor tool-using tasks' },
      style: nodeStyle,
    },
    {
      id: 'custom-strategy',
      position: { x: 650, y: 380 },
      data: { label: 'üé® Custom Strategy\nDomain-specific approach' },
      style: nodeStyle,
    },
    {
      id: 'execution',
      position: { x: 350, y: 500 },
      data: { label: '‚öôÔ∏è Strategy Execution\nRun selected approach' },
      style: { ...nodeStyle, background: '#3b82f6', minWidth: 200 },
    },
    {
      id: 'progress-monitor',
      position: { x: 100, y: 600 },
      data: { label: 'üìä Progress Monitoring\nTrack intermediate results' },
      style: { ...nodeStyle, background: '#7c3aed', minWidth: 200 },
    },
    {
      id: 'adaptation',
      position: { x: 350, y: 600 },
      data: { label: 'üîÑ Dynamic Adaptation\nAdjust strategy if needed' },
      style: { ...nodeStyle, background: '#7c3aed', minWidth: 200 },
    },
    {
      id: 'cross-validation',
      position: { x: 600, y: 600 },
      data: { label: '‚úÖ Cross-Validation\nVerify reasoning quality' },
      style: { ...nodeStyle, background: '#7c3aed', minWidth: 200 },
    },
    {
      id: 'result-synthesis',
      position: { x: 350, y: 720 },
      data: { label: 'üîó Result Synthesis\nCombine insights' },
      style: { ...nodeStyle, background: '#3b82f6', minWidth: 200 },
    },
    {
      id: 'confidence-assessment',
      position: { x: 100, y: 820 },
      data: { label: 'üìà Confidence Assessment\nEvaluate solution quality' },
      style: { ...nodeStyle, background: '#7c3aed', minWidth: 200 },
    },
    {
      id: 'explanation-generation',
      position: { x: 350, y: 820 },
      data: { label: 'üìù Explanation Generation\nJustify reasoning path' },
      style: { ...nodeStyle, background: '#7c3aed', minWidth: 200 },
    },
    {
      id: 'learning-update',
      position: { x: 600, y: 820 },
      data: { label: 'üéì Learning Update\nImprove future selections' },
      style: { ...nodeStyle, background: '#7c3aed', minWidth: 200 },
    },
    {
      id: 'output',
      position: { x: 350, y: 940 },
      data: { label: '‚ú® Solution with Meta-Insights' },
      style: { ...nodeStyle, background: '#10b981', minWidth: 200 },
    },
  ],
  initialEdges: [
    {
      id: 'input-meta',
      source: 'input',
      target: 'meta-controller',
      style: { ...edgeStyle, stroke: '#3b82f6' },
      animated: true,
    },
    {
      id: 'meta-analysis',
      source: 'meta-controller',
      target: 'problem-analysis',
      style: { ...edgeStyle, stroke: '#7c3aed' },
      label: 'Analyze',
    },
    {
      id: 'meta-strategy',
      source: 'meta-controller',
      target: 'strategy-selection',
      style: { ...edgeStyle, stroke: '#7c3aed' },
      label: 'Select',
    },
    {
      id: 'meta-resource',
      source: 'meta-controller',
      target: 'resource-allocation',
      style: { ...edgeStyle, stroke: '#7c3aed' },
      label: 'Allocate',
    },
    {
      id: 'analysis-strategy',
      source: 'problem-analysis',
      target: 'strategy-selection',
      style: edgeStyle,
    },
    {
      id: 'strategy-cot',
      source: 'strategy-selection',
      target: 'cot-strategy',
      style: edgeStyle,
      label: 'Sequential',
    },
    {
      id: 'strategy-tot',
      source: 'strategy-selection',
      target: 'tot-strategy',
      style: edgeStyle,
      label: 'Exploratory',
    },
    {
      id: 'strategy-debate',
      source: 'strategy-selection',
      target: 'debate-strategy',
      style: edgeStyle,
      label: 'Nuanced',
    },
    {
      id: 'strategy-react',
      source: 'strategy-selection',
      target: 'react-strategy',
      style: edgeStyle,
      label: 'Interactive',
    },
    {
      id: 'strategy-custom',
      source: 'strategy-selection',
      target: 'custom-strategy',
      style: edgeStyle,
      label: 'Specialized',
    },
    {
      id: 'cot-execution',
      source: 'cot-strategy',
      target: 'execution',
      style: edgeStyle,
    },
    {
      id: 'tot-execution',
      source: 'tot-strategy',
      target: 'execution',
      style: edgeStyle,
    },
    {
      id: 'debate-execution',
      source: 'debate-strategy',
      target: 'execution',
      style: edgeStyle,
    },
    {
      id: 'react-execution',
      source: 'react-strategy',
      target: 'execution',
      style: edgeStyle,
    },
    {
      id: 'custom-execution',
      source: 'custom-strategy',
      target: 'execution',
      style: edgeStyle,
    },
    {
      id: 'resource-execution',
      source: 'resource-allocation',
      target: 'execution',
      style: edgeStyle,
    },
    {
      id: 'execution-monitor',
      source: 'execution',
      target: 'progress-monitor',
      style: { ...edgeStyle, stroke: '#7c3aed' },
      label: 'Track',
    },
    {
      id: 'execution-adapt',
      source: 'execution',
      target: 'adaptation',
      style: { ...edgeStyle, stroke: '#7c3aed' },
      label: 'Adjust',
    },
    {
      id: 'execution-validate',
      source: 'execution',
      target: 'cross-validation',
      style: { ...edgeStyle, stroke: '#7c3aed' },
      label: 'Verify',
    },
    {
      id: 'monitor-adapt',
      source: 'progress-monitor',
      target: 'adaptation',
      style: edgeStyle,
    },
    {
      id: 'adapt-execution',
      source: 'adaptation',
      target: 'execution',
      style: { ...edgeStyle, stroke: '#f59e0b', strokeDasharray: '5 5' },
      label: 'Retry',
    },
    {
      id: 'adapt-meta',
      source: 'adaptation',
      target: 'meta-controller',
      style: { ...edgeStyle, stroke: '#f59e0b', strokeDasharray: '5 5' },
      label: 'Escalate',
    },
    {
      id: 'monitor-synthesis',
      source: 'progress-monitor',
      target: 'result-synthesis',
      style: edgeStyle,
    },
    {
      id: 'adapt-synthesis',
      source: 'adaptation',
      target: 'result-synthesis',
      style: edgeStyle,
    },
    {
      id: 'validate-synthesis',
      source: 'cross-validation',
      target: 'result-synthesis',
      style: edgeStyle,
    },
    {
      id: 'synthesis-confidence',
      source: 'result-synthesis',
      target: 'confidence-assessment',
      style: { ...edgeStyle, stroke: '#7c3aed' },
    },
    {
      id: 'synthesis-explanation',
      source: 'result-synthesis',
      target: 'explanation-generation',
      style: { ...edgeStyle, stroke: '#7c3aed' },
    },
    {
      id: 'synthesis-learning',
      source: 'result-synthesis',
      target: 'learning-update',
      style: { ...edgeStyle, stroke: '#7c3aed' },
    },
    {
      id: 'confidence-output',
      source: 'confidence-assessment',
      target: 'output',
      style: edgeStyle,
    },
    {
      id: 'explanation-output',
      source: 'explanation-generation',
      target: 'output',
      style: edgeStyle,
    },
    {
      id: 'learning-output',
      source: 'learning-update',
      target: 'output',
      style: edgeStyle,
    },
    {
      id: 'learning-meta',
      source: 'learning-update',
      target: 'meta-controller',
      style: { ...edgeStyle, stroke: '#f59e0b', strokeDasharray: '5 5' },
      label: 'Improve',
    },
  ],
  steps: [
    {
      title: 'Problem Input',
      description: 'Complex problem requiring sophisticated reasoning',
      activeNodes: ['input'],
      activeEdges: ['input-meta'],
    },
    {
      title: 'Meta-Level Analysis',
      description: 'Controller analyzes problem characteristics and requirements',
      activeNodes: ['meta-controller', 'problem-analysis', 'strategy-selection', 'resource-allocation'],
      activeEdges: ['meta-analysis', 'meta-strategy', 'meta-resource', 'analysis-strategy'],
    },
    {
      title: 'Strategy Selection',
      description: 'Choose optimal reasoning strategy based on problem type',
      activeNodes: ['strategy-selection', 'cot-strategy', 'tot-strategy', 'debate-strategy', 'react-strategy', 'custom-strategy'],
      activeEdges: ['strategy-cot', 'strategy-tot', 'strategy-debate', 'strategy-react', 'strategy-custom'],
    },
    {
      title: 'Strategy Execution',
      description: 'Execute selected reasoning approach with allocated resources',
      activeNodes: ['execution', 'debate-strategy'],
      activeEdges: ['debate-execution', 'resource-execution'],
    },
    {
      title: 'Runtime Monitoring',
      description: 'Monitor progress and adapt strategy if needed',
      activeNodes: ['progress-monitor', 'adaptation', 'cross-validation'],
      activeEdges: ['execution-monitor', 'execution-adapt', 'execution-validate', 'monitor-adapt'],
    },
    {
      title: 'Dynamic Adaptation',
      description: 'Adjust approach or escalate to meta-controller if issues detected',
      activeNodes: ['adaptation', 'meta-controller'],
      activeEdges: ['adapt-execution', 'adapt-meta'],
    },
    {
      title: 'Result Synthesis',
      description: 'Combine insights from execution and monitoring',
      activeNodes: ['result-synthesis'],
      activeEdges: ['monitor-synthesis', 'adapt-synthesis', 'validate-synthesis'],
    },
    {
      title: 'Quality Assessment',
      description: 'Evaluate confidence, generate explanations, update learning',
      activeNodes: ['confidence-assessment', 'explanation-generation', 'learning-update'],
      activeEdges: ['synthesis-confidence', 'synthesis-explanation', 'synthesis-learning'],
    },
    {
      title: 'Final Output',
      description: 'Deliver solution with meta-insights and confidence scores',
      activeNodes: ['output'],
      activeEdges: ['confidence-output', 'explanation-output', 'learning-output'],
    },
    {
      title: 'Learning Feedback',
      description: 'Update meta-controller with learned insights for future problems',
      activeNodes: ['learning-update', 'meta-controller'],
      activeEdges: ['learning-meta'],
    },
  ],
};