import { PatternScenario } from './types';
import { nodeStyle, edgeStyle } from './styles';

export const taskManagementOrchestrationPattern: PatternScenario = {
  id: 'task-management-orchestration',
  title: 'Task Management & Orchestration',
  initialNodes: [
    {
      id: 'complex-request',
      position: { x: 400, y: 50 },
      data: { label: 'üéØ Complex Request\n"Build a recommendation system with ML pipeline"' },
      style: { ...nodeStyle, background: '#10b981', minWidth: 280 },
    },
    {
      id: 'orchestrator',
      position: { x: 375, y: 150 },
      data: { label: 'üéº Task Orchestrator\nCentral coordination hub' },
      style: { ...nodeStyle, background: '#3b82f6', minWidth: 250 },
    },
    {
      id: 'task-analyzer',
      position: { x: 100, y: 250 },
      data: { label: 'üîç Task Analyzer\nDecompose & prioritize' },
      style: { ...nodeStyle, background: '#7c3aed', minWidth: 180 },
    },
    {
      id: 'dependency-mapper',
      position: { x: 300, y: 250 },
      data: { label: 'üó∫Ô∏è Dependency Mapper\nIdentify task relationships' },
      style: { ...nodeStyle, background: '#7c3aed', minWidth: 180 },
    },
    {
      id: 'resource-scheduler',
      position: { x: 500, y: 250 },
      data: { label: 'üìÖ Resource Scheduler\nAllocate agents & resources' },
      style: { ...nodeStyle, background: '#7c3aed', minWidth: 180 },
    },
    {
      id: 'progress-tracker',
      position: { x: 700, y: 250 },
      data: { label: 'üìä Progress Tracker\nMonitor completion status' },
      style: { ...nodeStyle, background: '#7c3aed', minWidth: 180 },
    },
    // Task Queue
    {
      id: 'task-queue',
      position: { x: 200, y: 380 },
      data: { label: 'üìã Task Queue\n‚Ä¢ Data collection (pending)\n‚Ä¢ Feature engineering (pending)\n‚Ä¢ Model training (pending)\n‚Ä¢ API development (pending)' },
      style: { ...nodeStyle, background: '#f59e0b', minWidth: 200 },
    },
    // Active Tasks
    {
      id: 'active-task-1',
      position: { x: 450, y: 380 },
      data: { label: '‚ö° Active: Data Collection\nAgent: DataAgent\nProgress: 75%' },
      style: { ...nodeStyle, background: '#ec4899', minWidth: 180 },
    },
    {
      id: 'active-task-2',
      position: { x: 650, y: 380 },
      data: { label: '‚ö° Active: Setup Infrastructure\nAgent: DevOpsAgent\nProgress: 100%' },
      style: { ...nodeStyle, background: '#22c55e', minWidth: 180 },
    },
    // Specialized Agents
    {
      id: 'data-agent',
      position: { x: 50, y: 520 },
      data: { label: 'ü§ñ Data Agent\nCollect & preprocess data' },
      style: { ...nodeStyle, background: '#6366f1', minWidth: 150 },
    },
    {
      id: 'ml-agent',
      position: { x: 200, y: 520 },
      data: { label: 'üß† ML Agent\nTrain & evaluate models' },
      style: { ...nodeStyle, background: '#6366f1', minWidth: 150 },
    },
    {
      id: 'devops-agent',
      position: { x: 350, y: 520 },
      data: { label: '‚öôÔ∏è DevOps Agent\nSetup infrastructure' },
      style: { ...nodeStyle, background: '#6366f1', minWidth: 150 },
    },
    {
      id: 'api-agent',
      position: { x: 500, y: 520 },
      data: { label: 'üåê API Agent\nBuild REST endpoints' },
      style: { ...nodeStyle, background: '#6366f1', minWidth: 150 },
    },
    {
      id: 'test-agent',
      position: { x: 650, y: 520 },
      data: { label: 'üß™ Test Agent\nValidate & test system' },
      style: { ...nodeStyle, background: '#6366f1', minWidth: 150 },
    },
    // Workflow Management
    {
      id: 'checkpoint-manager',
      position: { x: 100, y: 650 },
      data: { label: 'üíæ Checkpoint Manager\nSave progress states' },
      style: { ...nodeStyle, background: '#ef4444', minWidth: 180 },
    },
    {
      id: 'error-handler',
      position: { x: 300, y: 650 },
      data: { label: 'üö® Error Handler\nManage failures & retries' },
      style: { ...nodeStyle, background: '#ef4444', minWidth: 180 },
    },
    {
      id: 'adaptive-replanner',
      position: { x: 500, y: 650 },
      data: { label: 'üîÑ Adaptive Replanner\nAdjust workflow dynamically' },
      style: { ...nodeStyle, background: '#ef4444', minWidth: 180 },
    },
    {
      id: 'quality-gate',
      position: { x: 700, y: 650 },
      data: { label: '‚úÖ Quality Gate\nValidate task outputs' },
      style: { ...nodeStyle, background: '#ef4444', minWidth: 180 },
    },
    // Results Aggregation
    {
      id: 'result-aggregator',
      position: { x: 300, y: 780 },
      data: { label: 'üîó Result Aggregator\nCombine task outputs' },
      style: { ...nodeStyle, background: '#f59e0b', minWidth: 180 },
    },
    {
      id: 'report-generator',
      position: { x: 500, y: 780 },
      data: { label: 'üìù Report Generator\nCreate status reports' },
      style: { ...nodeStyle, background: '#f59e0b', minWidth: 180 },
    },
    {
      id: 'output',
      position: { x: 400, y: 900 },
      data: { label: '‚ú® Completed System\nFully deployed recommendation system' },
      style: { ...nodeStyle, background: '#10b981', minWidth: 250 },
    },
  ],
  initialEdges: [
    {
      id: 'request-orchestrator',
      source: 'complex-request',
      target: 'orchestrator',
      style: { ...edgeStyle, stroke: '#3b82f6' },
      animated: true,
    },
    {
      id: 'orchestrator-analyzer',
      source: 'orchestrator',
      target: 'task-analyzer',
      style: { ...edgeStyle, stroke: '#7c3aed' },
      label: 'Analyze',
    },
    {
      id: 'orchestrator-dependency',
      source: 'orchestrator',
      target: 'dependency-mapper',
      style: { ...edgeStyle, stroke: '#7c3aed' },
      label: 'Map',
    },
    {
      id: 'orchestrator-scheduler',
      source: 'orchestrator',
      target: 'resource-scheduler',
      style: { ...edgeStyle, stroke: '#7c3aed' },
      label: 'Schedule',
    },
    {
      id: 'orchestrator-tracker',
      source: 'orchestrator',
      target: 'progress-tracker',
      style: { ...edgeStyle, stroke: '#7c3aed' },
      label: 'Track',
    },
    {
      id: 'analyzer-queue',
      source: 'task-analyzer',
      target: 'task-queue',
      style: { ...edgeStyle, stroke: '#f59e0b' },
      label: 'Queue tasks',
    },
    {
      id: 'dependency-queue',
      source: 'dependency-mapper',
      target: 'task-queue',
      style: { ...edgeStyle, stroke: '#f59e0b' },
      label: 'Order tasks',
    },
    {
      id: 'scheduler-active1',
      source: 'resource-scheduler',
      target: 'active-task-1',
      style: { ...edgeStyle, stroke: '#ec4899' },
      label: 'Assign',
    },
    {
      id: 'scheduler-active2',
      source: 'resource-scheduler',
      target: 'active-task-2',
      style: { ...edgeStyle, stroke: '#22c55e' },
      label: 'Assign',
    },
    {
      id: 'queue-active1',
      source: 'task-queue',
      target: 'active-task-1',
      style: { ...edgeStyle, stroke: '#ec4899' },
      label: 'Dequeue',
    },
    {
      id: 'active1-data',
      source: 'active-task-1',
      target: 'data-agent',
      style: { ...edgeStyle, stroke: '#6366f1' },
      label: 'Execute',
    },
    {
      id: 'active2-devops',
      source: 'active-task-2',
      target: 'devops-agent',
      style: { ...edgeStyle, stroke: '#6366f1' },
      label: 'Execute',
    },
    {
      id: 'data-tracker',
      source: 'data-agent',
      target: 'progress-tracker',
      style: { ...edgeStyle, stroke: '#7c3aed', strokeDasharray: '5 5' },
      label: 'Update',
    },
    {
      id: 'ml-tracker',
      source: 'ml-agent',
      target: 'progress-tracker',
      style: { ...edgeStyle, stroke: '#7c3aed', strokeDasharray: '5 5' },
      label: 'Update',
    },
    {
      id: 'devops-tracker',
      source: 'devops-agent',
      target: 'progress-tracker',
      style: { ...edgeStyle, stroke: '#7c3aed', strokeDasharray: '5 5' },
      label: 'Update',
    },
    {
      id: 'api-tracker',
      source: 'api-agent',
      target: 'progress-tracker',
      style: { ...edgeStyle, stroke: '#7c3aed', strokeDasharray: '5 5' },
      label: 'Update',
    },
    {
      id: 'test-tracker',
      source: 'test-agent',
      target: 'progress-tracker',
      style: { ...edgeStyle, stroke: '#7c3aed', strokeDasharray: '5 5' },
      label: 'Update',
    },
    {
      id: 'tracker-checkpoint',
      source: 'progress-tracker',
      target: 'checkpoint-manager',
      style: { ...edgeStyle, stroke: '#ef4444' },
      label: 'Save state',
    },
    {
      id: 'agents-error',
      source: 'data-agent',
      target: 'error-handler',
      style: { ...edgeStyle, stroke: '#ef4444', strokeDasharray: '5 5' },
      label: 'On error',
    },
    {
      id: 'error-replanner',
      source: 'error-handler',
      target: 'adaptive-replanner',
      style: { ...edgeStyle, stroke: '#ef4444' },
      label: 'Trigger',
    },
    {
      id: 'replanner-orchestrator',
      source: 'adaptive-replanner',
      target: 'orchestrator',
      style: { ...edgeStyle, stroke: '#f59e0b', strokeDasharray: '5 5' },
      label: 'Replan',
    },
    {
      id: 'agents-quality',
      source: 'api-agent',
      target: 'quality-gate',
      style: { ...edgeStyle, stroke: '#ef4444' },
      label: 'Validate',
    },
    {
      id: 'quality-aggregator',
      source: 'quality-gate',
      target: 'result-aggregator',
      style: { ...edgeStyle, stroke: '#f59e0b' },
      label: 'Pass',
    },
    {
      id: 'checkpoint-aggregator',
      source: 'checkpoint-manager',
      target: 'result-aggregator',
      style: { ...edgeStyle, stroke: '#f59e0b' },
    },
    {
      id: 'aggregator-report',
      source: 'result-aggregator',
      target: 'report-generator',
      style: { ...edgeStyle, stroke: '#f59e0b' },
    },
    {
      id: 'report-output',
      source: 'report-generator',
      target: 'output',
      style: { ...edgeStyle, stroke: '#10b981' },
    },
    {
      id: 'aggregator-output',
      source: 'result-aggregator',
      target: 'output',
      style: { ...edgeStyle, stroke: '#10b981' },
    },
  ],
  steps: [
    {
      title: 'Complex Request Input',
      description: 'Receive complex multi-step request requiring orchestration',
      activeNodes: ['complex-request'],
      activeEdges: ['request-orchestrator'],
    },
    {
      title: 'Initialize Orchestration',
      description: 'Orchestrator analyzes request and initializes management systems',
      activeNodes: ['orchestrator', 'task-analyzer', 'dependency-mapper', 'resource-scheduler', 'progress-tracker'],
      activeEdges: ['orchestrator-analyzer', 'orchestrator-dependency', 'orchestrator-scheduler', 'orchestrator-tracker'],
    },
    {
      title: 'Task Decomposition',
      description: 'Break down complex request into manageable tasks with dependencies',
      activeNodes: ['task-analyzer', 'dependency-mapper', 'task-queue'],
      activeEdges: ['analyzer-queue', 'dependency-queue'],
    },
    {
      title: 'Resource Allocation',
      description: 'Schedule tasks and assign to specialized agents',
      activeNodes: ['resource-scheduler', 'task-queue', 'active-task-1', 'active-task-2'],
      activeEdges: ['scheduler-active1', 'scheduler-active2', 'queue-active1'],
    },
    {
      title: 'Parallel Execution',
      description: 'Multiple agents work on tasks concurrently',
      activeNodes: ['active-task-1', 'active-task-2', 'data-agent', 'devops-agent'],
      activeEdges: ['active1-data', 'active2-devops'],
    },
    {
      title: 'Progress Monitoring',
      description: 'Track task completion and update progress metrics',
      activeNodes: ['data-agent', 'devops-agent', 'progress-tracker'],
      activeEdges: ['data-tracker', 'devops-tracker'],
    },
    {
      title: 'Checkpoint Saving',
      description: 'Save progress state for recovery and tracking',
      activeNodes: ['progress-tracker', 'checkpoint-manager'],
      activeEdges: ['tracker-checkpoint'],
    },
    {
      title: 'Error Handling',
      description: 'Detect and handle task failures with retry logic',
      activeNodes: ['data-agent', 'error-handler', 'adaptive-replanner'],
      activeEdges: ['agents-error', 'error-replanner'],
    },
    {
      title: 'Adaptive Replanning',
      description: 'Dynamically adjust workflow based on failures or changes',
      activeNodes: ['adaptive-replanner', 'orchestrator'],
      activeEdges: ['replanner-orchestrator'],
    },
    {
      title: 'Quality Validation',
      description: 'Validate task outputs meet quality standards',
      activeNodes: ['api-agent', 'quality-gate'],
      activeEdges: ['agents-quality'],
    },
    {
      title: 'Result Aggregation',
      description: 'Combine outputs from all completed tasks',
      activeNodes: ['quality-gate', 'checkpoint-manager', 'result-aggregator'],
      activeEdges: ['quality-aggregator', 'checkpoint-aggregator'],
    },
    {
      title: 'Report Generation',
      description: 'Generate comprehensive status and completion reports',
      activeNodes: ['result-aggregator', 'report-generator'],
      activeEdges: ['aggregator-report'],
    },
    {
      title: 'Final Output',
      description: 'Deliver completed system with full documentation',
      activeNodes: ['report-generator', 'result-aggregator', 'output'],
      activeEdges: ['report-output', 'aggregator-output'],
    },
  ],
};