version: '3.8'

services:
  api-firecracker:
    build:
      context: .
      dockerfile: Dockerfile.firecracker
    ports:
      - "8000:8000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /dev/kvm:/dev/kvm
      - firecracker_data:/opt/firecracker
    devices:
      - /dev/kvm:/dev/kvm
    privileged: true
    cap_add:
      - NET_ADMIN
      - SYS_ADMIN
    environment:
      - PYTHONUNBUFFERED=1
      - SECURITY_LEVEL=sandbox
      - FIRECRACKER_POOL_SIZE=3
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    sysctls:
      - net.ipv4.ip_forward=1
    networks:
      - firecracker-net
    
  # Original Docker-based API (fallback)
  api-docker:
    build: .
    ports:
      - "8001:8000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - PYTHONUNBUFFERED=1
    restart: unless-stopped
    profiles:
      - fallback
    
  # Redis for caching execution results and VM state
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    restart: unless-stopped
    volumes:
      - redis_data:/data
    
  # Monitoring and metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  redis_data:
  firecracker_data:

networks:
  firecracker-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16